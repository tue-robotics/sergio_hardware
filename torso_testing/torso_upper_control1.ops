########################################################################
#                                                                      #
# Torso Controller deployer file. deployer file.                	   #
#                                                                      #
# Generic Structure	by Ton Peters				                       #
# September 2014                                                       #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
# Global parameters
var double Ts 			= 0.001
var int BODYNUMBER 		= 1
var string BODYNAME 	= "base"
var bool HOMEABLE 		= false
var string  TORSO_SLAVE_1   = "Soem.Slave_1002"; # torso fpga, motors
var string 	TORSO_SLAVE_2 	= "Soem.Slave_1003"; # brakes

# Motor, gearbox and encoder specs
var int ENCODERBITS = 65536;							# ?????????????????
var double GEARBOX = 13/3; # Motor to drive train
var array ENC2POS = array(1.0, 1.0);	# ?????????????????
var int NBITS = 8; # number of bits to the backhoff stack
var array MAX_VELS = array(300000.0, 300000.0);
var double USER_INTERVAL = 0.5;

    # Safety
var int     N_JOINTS            = 2;                # number of joints
var int     N_MOTORS            = 2;                # number of motors
#var array   MAX_VELOCITIES      = array (0.0, 0.0)
var array   MAX_ERRORS          = array (10000.0, 10000.0); #AMIGO:( 2.2, 2.2, 2.2, 2.2 )
var array   MAX_OUTPUT          = array (10.0, 200.0);
var double  MAX_SATURATION_TIME = 1.0;

# Cotroller parameters
var strings CONTROLLERS                 = strings ("WeakIntegrator")
var array   GAINS                       = array (-0.0, -0.025)
var array   INTEGRATOR_ZERO_FREQUENCY   = array (0.0, 0.1)
#var array   LEAD_FREQUENCY              = array (0.0, 1.0)
#var array   LAG_FREQUENCY               = array (0.0, 10.0)
#var array   LOWPASS_FREQUENCY           = array (500.0, 500.0, 500.0, 500.0)
#var array   LOWPASS_DAMPING             = array (0.7, 0.7, 0.7, 0.7)
 
### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

### Loading Components ###

### CONTROLLER COMPONENT ###
loadComponent("TORSO_REF","SOURCES::ConstantSignal")
addPeer("Supervisor","TORSO_REF")
setActivity("TORSO_REF",Ts,HighestPriority,ORO_SCHED_RT)
TORSO_REF.value = array(0.0, 0.0);
TORSO_REF.vector_size = 2;
TORSO_REF.configure

### CONTROLLER COMPONENT ###
loadComponent("TORSO_Controller","FILTERS::Controller")
addPeer("Supervisor","TORSO_Controller")
setActivity("TORSO_Controller",0.0,HighestPriority,ORO_SCHED_RT)
TORSO_Controller.vector_size = 2;
TORSO_Controller.sampling_time = Ts;
TORSO_Controller.controllers = CONTROLLERS;
TORSO_Controller.gains = GAINS;
TORSO_Controller.zero_freq_WeakIntegrator = INTEGRATOR_ZERO_FREQUENCY;
#TORSO_Controller.zero_freq_LeadLag = LEAD_FREQUENCY;
#TORSO_Controller.pole_freq_LeadLag = LAG_FREQUENCY;
#TORSO_Controller.zero_freq_Notch = NOTCH_ZERO_FREQ;
#TORSO_Controller.zero_damp_Notch = NOTCH_ZERO_DAMP;
#TORSO_Controller.pole_freq_Notch = NOTCH_POLE_FREQ;
#TORSO_Controller.pole_damp_Notch = NOTCH_POLE_DAMP;
#TORSO_Controller.pole_freq_LowPass = LOWPASS_FREQUENCY;
#TORSO_Controller.pole_damp_LowPass = LOWPASS_DAMPING;
TORSO_Controller.configure
	
### Safety ###
loadComponent("TORSO_Safety","SUPERVISORY::Safety")
addPeer("Supervisor","TORSO_Safety")
setActivity("TORSO_Safety",0.0,HighestPriority,ORO_SCHED_RT)
TORSO_Safety.NJ                  = N_JOINTS
TORSO_Safety.NM                  = N_MOTORS
TORSO_Safety.maxJointErrors      = MAX_ERRORS
TORSO_Safety.motorSaturations    = MAX_OUTPUT
TORSO_Safety.maxConSatTime       = MAX_SATURATION_TIME
TORSO_Safety.configure

# PWM out
loadComponent("TORSO_MotorPWM", "SOEM::AnalogOutsGeneric")
addPeer("Supervisor", "TORSO_MotorPWM")
setActivity("TORSO_MotorPWM", 0.0, HighestPriority, ORO_SCHED_RT)
TORSO_MotorPWM.numberofinports    		= 1
TORSO_MotorPWM.numberofoutports    		= 1
TORSO_MotorPWM.input_sizes 				= array (2.0)
TORSO_MotorPWM.output_sizes 			= array (3.0)
TORSO_MotorPWM.output_positions			= array (1.0, 1.0, 0.0 )
TORSO_MotorPWM.configure

# Digital outs enable
loadComponent("TORSO_EnableDO", "SOEM::DigitalOuts")
addPeer("Supervisor", "TORSO_EnableDO")
setActivity("TORSO_EnableDO", 0.0, HighestPriority, ORO_SCHED_RT)
TORSO_EnableDO.configure

# Digital outs brake
loadComponent("TORSO_BrakeDO", "SOEM::DigitalOuts")
addPeer("Supervisor", "TORSO_BrakeDO")
setActivity("TORSO_BrakeDO", 0.0, HighestPriority, ORO_SCHED_RT)
TORSO_BrakeDO.number_of_bits = NBITS;
TORSO_BrakeDO.configure

# Encoder to ros
loadComponent("TORSO_ErrorTToRos","ROS::DoublesToROS")
addPeer("Supervisor","TORSO_ErrorTToRos")
setActivity("TORSO_ErrorTToRos",0.25,LowestPriority,ORO_SCHED_OTHER)
TORSO_ErrorTToRos.NumberOfDoublesInVector = 2;
TORSO_ErrorTToRos.configure

# Motor to ros
loadComponent("TORSO_ControlToRos","ROS::DoublesToROS")
addPeer("Supervisor","TORSO_ControlToRos")
setActivity("TORSO_ControlToRos",0.25,LowestPriority,ORO_SCHED_OTHER)
TORSO_ControlToRos.NumberOfDoublesInVector = 2;
TORSO_ControlToRos.configure

# Encoder to ros
loadComponent("TORSO_ENCToRos","ROS::DoublesToROS")
addPeer("Supervisor","TORSO_ENCToRos")
setActivity("TORSO_ENCToRos",0.25,LowestPriority,ORO_SCHED_OTHER)
TORSO_ENCToRos.NumberOfDoublesInVector = 2;
TORSO_ENCToRos.configure

# Digital outs false
loadComponent("TORSO_False", "SOURCES::ConstantBool")
addPeer("Supervisor", "TORSO_False")
setActivity("TORSO_False", Ts, HighestPriority, ORO_SCHED_RT)
TORSO_False.value = false;
TORSO_False.configure

#### CONNECT COMPONENTS ####
# disable lower torso
connect ("TORSO_False.out","TORSO_EnableDO.in1", ConnPolicy() )
connect ("TORSO_False.out","TORSO_BrakeDO.in1", ConnPolicy() )

# control loop
connect ("TORSO_ReadEncoders.out","TORSO_Controller.pos_in", ConnPolicy())
connect ("TORSO_REF.out","TORSO_Controller.ref_in", ConnPolicy())
connect ("TORSO_Controller.out","TORSO_MotorPWM.in1", ConnPolicy())
connect ("TORSO_MotorPWM.out1",TORSO_SLAVE_1+".pwmDutyMotors", ConnPolicy() )

# Safety
connect ("TORSO_Controller.jointErrors",    "TORSO_Safety.jointErrors", ConnPolicy() )
connect ("TORSO_Controller.out",            "TORSO_Safety.controlEffort", ConnPolicy() )
connect ("TORSO_Safety.error",              "Supervisor.base_error",    ConnPolicy() ); # error
connect ("TORSO_Safety.enable",             "TORSO_Controller.enable",   ConnPolicy() ); # error
connect ("TORSO_Safety.enable",             TORSO_SLAVE_1+".enablePort", ConnPolicy() )
connect ("TORSO_Safety.enable",             "TORSO_EnableDO.in2", ConnPolicy() )
connect ("TORSO_Safety.enable",             "TORSO_BrakeDO.in2", ConnPolicy() )
connect ("TORSO_EnableDO.digital_out",      TORSO_SLAVE_1+".digitalOuts", ConnPolicy() )
connect ("TORSO_BrakeDO.digital_out",       TORSO_SLAVE_2+".bits", ConnPolicy() )

# data to ros
connect ("TORSO_REF.out","TORSO_ErrorTToRos.in", ConnPolicy() )
stream ("TORSO_ErrorTToRos.out1", ros.topic("/sergio/torso/ref_1"));
stream ("TORSO_ErrorTToRos.out2", ros.topic("/sergio/torso/ref_2"));
connect ("TORSO_Controller.out","TORSO_ControlToRos.in", ConnPolicy() )
stream ("TORSO_ControlToRos.out1", ros.topic("/sergio/torso/control_1"));
stream ("TORSO_ControlToRos.out2", ros.topic("/sergio/torso/control_2"));
connect ("TORSO_ReadEncoders.out","TORSO_ENCToRos.in", ConnPolicy() )
stream ("TORSO_ENCToRos.out1", ros.topic("/sergio/torso/enc_1"));
stream ("TORSO_ENCToRos.out2", ros.topic("/sergio/torso/enc_2"));

#### START COMPONENTS ####
# Control
Supervisor.AddAllwaysOnPeer("TORSO_REF")
Supervisor.AddAllwaysOnPeer("TORSO_Controller")
Supervisor.AddAllwaysOnPeer("TORSO_MotorPWM")

# safety
Supervisor.AddAllwaysOnPeer("TORSO_EnableDO")
Supervisor.AddAllwaysOnPeer("TORSO_BrakeDO")
Supervisor.AddAllwaysOnPeer("TORSO_False")

# dataflow to ros
Supervisor.AddAllwaysOnPeer("TORSO_ErrorTToRos")
Supervisor.AddAllwaysOnPeer("TORSO_ControlToRos")
Supervisor.AddAllwaysOnPeer("TORSO_ENCToRos")

# enable
Supervisor.AddEnabledPeer    ("TORSO_Safety",             BODYNUMBER)


