########################################################################
#                                                                      #
# Torso Controller deployer file. deployer file.                	   #
#                                                                      #
# Generic Structure	by Ton Peters				                       #
# September 2014                                                       #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
# Global parameters
var double Ts = 0.001
var int BODYNUMBER 		= 2
var string BODYNAME 	= "torso"
var bool HOMEABLE 		= false

# Motor, gearbox and encoder specs
var int ENCODERBITS = 65536;							# ?????????????????
var double GEARBOX = 13/3; # Motor to drive train
var array ENC2POS = array(1.0, 1.0);	# ?????????????????
var int NBITS = 8; # number of bits to the backhoff stack
var array MAX_VELS = array(300000.0, 300000.0);
var double USER_INTERVAL = 0.5;

 
### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

### Loading Components ###
#Reading Encoders
loadComponent("TORSO_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","TORSO_ReadEncoders")
setActivity("TORSO_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
TORSO_ReadEncoders.encoderbits = ENCODERBITS
TORSO_ReadEncoders.enc2SI = ENC2POS 
TORSO_ReadEncoders.configure

# Get user input
loadComponent("TORSO_ReadUserInput","ROS::ReadTwistMsg")
addPeer("Supervisor","TORSO_ReadUserInput")
setActivity("TORSO_ReadUserInput",0.01,LowestPriority,ORO_SCHED_OTHER)
TORSO_ReadUserInput.max_start_vel = 1000.0
TORSO_ReadUserInput.max_vel = array(100000.0,100000.0,0.1)
TORSO_ReadUserInput.max_acc = array (100000.0, 100000.0, 0.1)
TORSO_ReadUserInput.max_interval = USER_INTERVAL
TORSO_ReadUserInput.configure

# Transform to motor input
loadComponent("TORSO_InputToMotor","MATH::MatrixTransform")
addPeer("Supervisor","TORSO_InputToMotor")
setActivity("TORSO_InputToMotor",Ts,HighestPriority,ORO_SCHED_RT)
TORSO_InputToMotor.Nrows = 2
TORSO_InputToMotor.Ncolumns = 3
TORSO_InputToMotor.configure
TORSO_InputToMotor.function1 = array (1.0, 0.0, 0.0)
TORSO_InputToMotor.function2 = array (0.0, 1.0, 0.0)

# Generate output signals
loadComponent("TORSO_Outputs","CUSTOM::MotorTest")
addPeer("Supervisor","TORSO_Outputs")
setActivity("TORSO_Outputs",0.0,HighestPriority,ORO_SCHED_RT)
TORSO_Outputs.max_velocities = MAX_VELS
TORSO_Outputs.configure
	
# AnalogOuts
loadComponent("TORSO_MotorAO", "SOEM::AnalogOutsGeneric")
addPeer("Supervisor", "TORSO_MotorAO")
setActivity("TORSO_MotorAO", 0.0, HighestPriority, ORO_SCHED_RT)
TORSO_MotorAO.numberofinports    		= 1
TORSO_MotorAO.numberofoutports    		= 1
TORSO_MotorAO.input_sizes 				= array (2.0)
TORSO_MotorAO.output_sizes 				= array (3.0)
TORSO_MotorAO.output_positions			= array (1.0, 1.0, 0.0 )
TORSO_MotorAO.configure

# Digital outs enable
loadComponent("TORSO_EnableDO", "SOEM::DigitalOuts")
addPeer("Supervisor", "TORSO_EnableDO")
setActivity("TORSO_EnableDO", 0.0, HighestPriority, ORO_SCHED_RT)
TORSO_EnableDO.configure

# Digital outs brake
loadComponent("TORSO_BrakeDO", "SOEM::DigitalOuts")
addPeer("Supervisor", "TORSO_BrakeDO")
setActivity("TORSO_BrakeDO", 0.0, HighestPriority, ORO_SCHED_RT)
TORSO_BrakeDO.number_of_bits = NBITS;
TORSO_BrakeDO.configure

# Encoder to ros
loadComponent("TORSO_EncoderToRos","ROS::DoublesToROS")
addPeer("Supervisor","TORSO_EncoderToRos")
setActivity("TORSO_EncoderToRos",1.0,LowestPriority,ORO_SCHED_OTHER)
TORSO_EncoderToRos.NumberOfDoublesInVector = 2;
TORSO_EncoderToRos.configure

# Motor to ros
loadComponent("TORSO_MotorToRos","ROS::DoublesToROS")
addPeer("Supervisor","TORSO_MotorToRos")
setActivity("TORSO_MotorToRos",0.25,LowestPriority,ORO_SCHED_OTHER)
TORSO_MotorToRos.NumberOfDoublesInVector = 2;
TORSO_MotorToRos.configure

# Enable and brake to ros
loadComponent("TORSO_BoolToRos","ROS::BoolToROS")
addPeer("Supervisor","TORSO_BoolToRos")
setActivity("TORSO_BoolToRos",0.25,LowestPriority,ORO_SCHED_OTHER)
TORSO_BoolToRos.NumberOfBoolPorts = 4;
TORSO_BoolToRos.configure

# Digital outs brake
loadComponent("TORSO_True", "SOURCES::ConstantBool")
addPeer("Supervisor", "TORSO_True")
setActivity("TORSO_True", Ts, HighestPriority, ORO_SCHED_RT)
TORSO_True.value = true;
TORSO_True.configure

#### CONNECT COMPONENTS ####
# User input
connect ("TORSO_ReadUserInput.out","TORSO_InputToMotor.in", ConnPolicy() )
connect ("TORSO_InputToMotor.out","TORSO_Outputs.in", ConnPolicy() )
connect ("TORSO_Outputs.out","TORSO_MotorAO.in1", ConnPolicy() )
connect ("TORSO_Outputs.enable1","TORSO_EnableDO.in1", ConnPolicy() )
connect ("TORSO_Outputs.enable2","TORSO_EnableDO.in2", ConnPolicy() )
connect ("TORSO_Outputs.brake1","TORSO_BrakeDO.in1", ConnPolicy() )
connect ("TORSO_Outputs.brake2","TORSO_BrakeDO.in2", ConnPolicy() )

# data to PERA
connect ("TORSO_True.out","Soem.Slave_1002.enablePort", ConnPolicy() )
connect ("TORSO_MotorAO.out1","Soem.Slave_1002.pwmDutyMotors", ConnPolicy() )
connect ("TORSO_EnableDO.digital_out","Soem.Slave_1002.digitalOuts", ConnPolicy() )
connect ("TORSO_BrakeDO.digital_out","Soem.Slave_1003.bits", ConnPolicy() )

# output from pera
connect ("Soem.Slave_1002.encoder1","TORSO_ReadEncoders.enc1_in", ConnPolicy() )
connect ("Soem.Slave_1002.encoder2","TORSO_ReadEncoders.enc2_in", ConnPolicy() )
connect ("TORSO_ReadEncoders.out","TORSO_Outputs.enc", ConnPolicy() )

# data from ros
stream ("TORSO_ReadUserInput.cmd_vel", ros.topic("/sergio/base/references"));

# data to ros
connect ("TORSO_ReadEncoders.out","TORSO_EncoderToRos.in", ConnPolicy() )
stream ("TORSO_EncoderToRos.out1", ros.topic("/sergio/torso/encoder_1"));
stream ("TORSO_EncoderToRos.out2", ros.topic("/sergio/torso/encoder_2"));
connect ("TORSO_Outputs.out","TORSO_MotorToRos.in", ConnPolicy() )
stream ("TORSO_MotorToRos.out1", ros.topic("/sergio/torso/motor_1"));
stream ("TORSO_MotorToRos.out2", ros.topic("/sergio/torso/motor_2"));
connect ("TORSO_Outputs.enable1","TORSO_BoolToRos.bool_in1", ConnPolicy() )
connect ("TORSO_Outputs.enable2","TORSO_BoolToRos.bool_in2", ConnPolicy() )
connect ("TORSO_Outputs.brake1","TORSO_BoolToRos.bool_in3", ConnPolicy() )
connect ("TORSO_Outputs.brake2","TORSO_BoolToRos.bool_in4", ConnPolicy() )
stream ("TORSO_BoolToRos.bool_out1", ros.topic("/sergio/torso/enable_1"));
stream ("TORSO_BoolToRos.bool_out2", ros.topic("/sergio/torso/enable_2"));
stream ("TORSO_BoolToRos.bool_out3", ros.topic("/sergio/torso/brake_1"));
stream ("TORSO_BoolToRos.bool_out4", ros.topic("/sergio/torso/brake_2"));

#### START COMPONENTS ####
# Data from pera
Supervisor.AddAllwaysOnPeer ("TORSO_ReadEncoders")

# Input to pera
Supervisor.AddAllwaysOnPeer("TORSO_InputToMotor")
Supervisor.AddAllwaysOnPeer("TORSO_Outputs")
Supervisor.AddAllwaysOnPeer("TORSO_MotorAO")
Supervisor.AddAllwaysOnPeer("TORSO_EnableDO")
Supervisor.AddAllwaysOnPeer("TORSO_BrakeDO")

# dataflow to ros
Supervisor.AddAllwaysOnPeer("TORSO_EncoderToRos")
Supervisor.AddAllwaysOnPeer("TORSO_MotorToRos")
Supervisor.AddAllwaysOnPeer("TORSO_BoolToRos")

Supervisor.AddAllwaysOnPeer("TORSO_True")

# user input
Supervisor.AddAllwaysOnPeer("TORSO_ReadUserInput")
