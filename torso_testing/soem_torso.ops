########################################################################
#                                                                      #
# Simple Open EtherCAT Master (SOEM) deployer file 				   	   #
#                                                                      #
########################################################################

#### IMPORT PACKAGE ####
import("rtt_ros")
import("rtt_rosnode")
import("rtt_roscomm")
import("soem_master")
import("soem_beckhoff_drivers")
import("tue_ethercat_drivers")
import("sergio_hardware")
import("amigo_hardware")
ros.import("rtt_control_components")

#### DECLARATION OF PARAMETERS ####
var double Ts = 0.001
var string 	TORSO_SLAVE_1 	= "Soem.Slave_1002"; # torso motors

var int ENCODERBITS = 65536;							# ?????????????????
var double GEARBOX = 13/3; # Motor to drive train
var array ENC2POS = array(1.0, 1.0);	# ?????????????????

#### LOAD SUPERVISOR ###
loadComponent("Supervisor","SUPERVISORY::Supervisor")
Supervisor.configure
setActivity("Supervisor",0.04,LowestPriority,ORO_SCHED_OTHER)
#Supervisor.start
stream("Supervisor.rosemergency", ros.topic("/sergio/emergency_switch"));
stream("Supervisor.rosshutdown", ros.topic("/sergio/etherCAT_shutdown")); 
stream("Supervisor.rosetherCATenabled", ros.topic("/sergio/etherCAT_enabled")); 
stream("Supervisor.hardware_status", ros.topic("/sergio/hardware_status")); 
stream("Supervisor.dashboardCmd", ros.topic("/sergio/dashboard_ctrlcmds")); 

### LOAD SOEM COMPONENT FOR ETHERCAT COMMUNICATION ###
##This component enables communication with EtherCAT through the SoemMaster component.
loadComponent("Soem","soem_master::SoemMasterComponent")
addPeer("Supervisor","Soem")
#Configure the component. This looks for connected EtherCAT slaves and creates ports for all of the slaves.
Soem.configure
#Set a realtime priority to this component and run it every 1ms.
setActivity("Soem",Ts,HighestPriority,ORO_SCHED_RT)
connect (TORSO_SLAVE_1+".encoder1", "Supervisor.serialRunning", ConnPolicy() ) ;#ToDo: replace serialrunning port?

#### LOAD COMPONENT TO ENABLE ANALOG INS ###
loadComponent("AnalogIns","SOEM::AnalogInsGeneric");
addPeer("Supervisor","AnalogIns")
AnalogIns.numberofinports = 2;
AnalogIns.input_sizes = array(3.0, 3.0)
AnalogIns.numberofoutports = 1;
AnalogIns.output_sizes = array(6.0)
AnalogIns.input_positions = array(1.0, 1.0, 1.0, 1.0, 1.0, 1.0)
AnalogIns.direct_to_ROS = false
AnalogIns.configure
setActivity("AnalogIns",1.0,HighestPriority,ORO_SCHED_RT)
connect ("AnalogIns.in1",TORSO_SLAVE_1 +".forceSensors", ConnPolicy() );
connect ("AnalogIns.in2",TORSO_SLAVE_1 +".positionSensors", ConnPolicy() );

#Reading Encoders
loadComponent("TORSO_ReadEncoders","SOEM::ReadEncoders")
addPeer("Supervisor","TORSO_ReadEncoders")
setActivity("TORSO_ReadEncoders",Ts,HighestPriority,ORO_SCHED_RT)
TORSO_ReadEncoders.encoderbits = ENCODERBITS
TORSO_ReadEncoders.enc2SI = ENC2POS 
TORSO_ReadEncoders.configure

connect (TORSO_SLAVE_1+".encoder1","TORSO_ReadEncoders.enc1_in", ConnPolicy() )
connect (TORSO_SLAVE_1+".encoder2","TORSO_ReadEncoders.enc2_in", ConnPolicy() )

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("Soem")
Supervisor.AddAllwaysOnPeer ("TORSO_ReadEncoders")
Supervisor.AddAllwaysOnPeer ("AnalogIns")
Supervisor.start()
