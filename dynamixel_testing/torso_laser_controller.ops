########################################################################
#                                                                      #
# Head deployer file 											   	   #
#                                                                      #
# Max Baeten                                                           #
#                                                                      #
########################################################################

#### DECLARATION OF PARAMETERS ####
var double TS= 0.001;
var double RAD_TO_STEP = 195.37860814; # IF YOU CHANGE THIS VARIABLE, ALSO RECALCULATE PAN_MIN, PAN_MAX, TILT_MIN AND TILT_MAX, (From header file) 
var strings JOINT_NAMES= strings( "laser_tilt_joint" )
var int OFFSET = 512; # Center pan dynamixel
var int MIN = -306; # -1.57*RAD_TO_STEP
var int MAX = 306; #  1.57*RAD_TO_STEP
var int BODYNUMBER= 2;
var string BODYNAME= "laser";
var bool HOMEABLE = false;

### NameBodyPart ###
Supervisor.NameBodyPart( BODYNUMBER, BODYNAME, HOMEABLE)

## Pan-tilt controller
loadComponent("LASER_Controller", "SERGIOCUSTOM::DynamixelController")
addPeer("Supervisor","LASER_Controller")
setActivity("LASER_Controller",TS,HighestPriority,ORO_SCHED_RT)
LASER_Controller.joint_names 		= JOINT_NAMES
LASER_Controller.dynamixel_id 		= 2
LASER_Controller.dynamixel_offset 	= OFFSET
LASER_Controller.dynamixel_max 		= OFFSET + MAX
LASER_Controller.dynamixel_min 		= OFFSET + MIN
LASER_Controller.dynamixel_speed 	= 50
LASER_Controller.configure

## Pan-tilt controller
loadComponent("LASER_Enabler", "AMIGOHEAD::HeadEnabler")
addPeer("Supervisor","LASER_Enabler")
setActivity("LASER_Enabler",TS,HighestPriority,ORO_SCHED_RT)
LASER_Enabler.configure

#### CONNECT COMPONENTS ####
connect ("Soem.Slave_100f.data_tx", "LASER_Controller.instruction", ConnPolicy() )
connect ("Soem.Slave_100f.data_rx", "LASER_Controller.status", ConnPolicy() )
connect ("Soem.Slave_100f.ready_rx", "LASER_Controller.serialReadyRx", ConnPolicy() )
connect ("Soem.Slave_100f.running", "LASER_Controller.serialRunning", ConnPolicy() )
#connect ("LASER_Controller.errortosupervisor","Supervisor.head_error", ConnPolicy() )
connect ("LASER_Enabler.out","LASER_Controller.enabler", ConnPolicy() )

#### CONNECT ROS STREAMS ####
stream( "LASER_Controller.goalPos", ros.topic("/sergio/laser_tilt/references"))
stream( "LASER_Controller.currentPos", ros.topic("/sergio/laser_tilt/measurements"))
stream( "LASER_Controller.currentPos", ros.topic("/sergio/joint_states"))

#### START COMPONENTS ####
Supervisor.AddAllwaysOnPeer ("LASER_Controller")
Supervisor.AddEnabledPeer ("LASER_Enabler",BODYNUMBER)
